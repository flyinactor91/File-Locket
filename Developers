File Locket
Created by Michael duPont (flyinactor91@gmail.com)
v2.0.0 [2013-09-27]
Python 2.7.5 - Unix

A brief overview of data structures and improvements/issues


Client:
userSets = {'senddir' , 'destdir' , 'startalert'}
Storage pickle save/load order: userName, sessionID, userSets
File encryption would be implemented with client-side keys before transmission
--Currently trying to work out how to store key-derivation on server for when client logs into a new session
--Will likely implement as optional TNO encryption
Up arrow yields previous text entries
--Trying to find module to replace raw_input that works with arrow key keyboard event
Currently, getpass issues echo while in x86 Python IDLE


Server:
UserStorage = { username : [encrypted password , current sessionID , [list of user's alerts]] , ...}
FileStorage = { username : { filename : [checksum , [list of version datetimes]] , ...} , ...}
ServerStats = {'Total Files' , 'Total Files and Versions' , 'Total Users' , 'Critical Errors'}
Storage pickle save/load order: UserStorage, FileStorage, ServerStats
Folder support is tricky due to viewfile lists and how file versioning is set up
Scaling will be a problem
--No inherent multi-threading, serves only one user at a time (untested for multiple-user large file transfers)
Account authentication would come through email with server-generated random string for user to send to server
--Option to change password will not be added until user authentication
--Same for account deactivation


Notes on fileBuffer variable:
This is a way to prevent socket timeouts using slower hardware such as the Raspberry Pi. The number defines the approximate length the sender will send before pausing to allow the reciever to finish processing and clear out the socket. While arbitrary compared to socketRecvBuffer, this number needs to reflect the capabilities of the recieving hardware. Therefore, it is up to the admin/developer to determine the apropriate number and may require trial and error, especially on slow hardware. It should be noted that the most the buffer will ever be exceeded by is (socketRecvBuffer-1).
fileBuffer also informs the progress bar when to update. Lower number on receiver's end means a more updated (and therefore a more accurate) progress bar.
